
fn linia(n: i32,row: u32, par: u32) -> String{
  let znaki=["■","□"];
  let pat=["□■","■□"];
  let p2 = match row&1 {
    1 => 0,
    _ => 1,
  };

  match par{
    1 => format!("{}",linia(n+2,row+1,0).chars()
      .skip(1)
      .take((n) as usize)
      .collect::<String>()),
    _ => format!("{}{}{}",pat[1].repeat((row/2) as usize),
                            znaki[p2].repeat(((n as u32)-(row/2)*4) as usize),
                            pat[0].repeat((row/2) as usize))
  }
}

fn zoom(n: i32) -> String {
    let mut s:String = "".to_string();
    let par:u32= match (n/2)&1 {
                    0 => 0,
                    _ => 1,
              };

    for i in 1..=n {
        match i<=n/2 {
            true => s=format!("{}{}\n",s, linia(n,i as u32,par)),
            _ => s=format!("{}{}\n",s,linia(n,(n+1-i) as u32,par)),
        }
    }

    s.chars().take((n*(n+1)-1) as usize).collect()
}


fn main() {
    println!("{}",zoom(9));
    for i in (11..20).step_by(2){
      println!("{}",zoom(i))
    }
}

#[test]
fn basic_test_1() {
  assert_eq!(zoom(1), "■");
}

#[test]
fn basic_test_2() {
  assert_eq!(zoom(3), "\
□□□
□■□
□□□"
  );
}

#[test]
fn basic_test_3() {
  assert_eq!(zoom(5), "\
■■■■■
■□□□■
■□■□■
■□□□■
■■■■■"
  );
}

#[test]
fn basic_test_4() {
  assert_eq!(zoom(7), "\
□□□□□□□
□■■■■■□
□■□□□■□
□■□■□■□
□■□□□■□
□■■■■■□
□□□□□□□"
  );
}

#[test]
fn basic_test_5() {
  assert_eq!(zoom(9), "\
■■■■■■■■■
■□□□□□□□■
■□■■■■■□■
■□■□□□■□■
■□■□■□■□■
■□■□□□■□■
■□■■■■■□■
■□□□□□□□■
■■■■■■■■■"
  );
}
#[test]
fn basic_test_6() {
  assert_eq!(zoom(11), "\
□□□□□□□□□□□
□■■■■■■■■■□
□■□□□□□□□■□
□■□■■■■■□■□
□■□■□□□■□■□
□■□■□■□■□■□
□■□■□□□■□■□
□■□■■■■■□■□
□■□□□□□□□■□
□■■■■■■■■■□
□□□□□□□□□□□"
  );
}
#[test]
fn basic_test_7() {
  assert_eq!(zoom(13), "\
■■■■■■■■■■■■■
■□□□□□□□□□□□■
■□■■■■■■■■■□■
■□■□□□□□□□■□■
■□■□■■■■■□■□■
■□■□■□□□■□■□■
■□■□■□■□■□■□■
■□■□■□□□■□■□■
■□■□■■■■■□■□■
■□■□□□□□□□■□■
■□■■■■■■■■■□■
■□□□□□□□□□□□■
■■■■■■■■■■■■■"
  );
}
#[test]
fn basic_test_8() {
  assert_eq!(zoom(15), "\
□□□□□□□□□□□□□□□
□■■■■■■■■■■■■■□
□■□□□□□□□□□□□■□
□■□■■■■■■■■■□■□
□■□■□□□□□□□■□■□
□■□■□■■■■■□■□■□
□■□■□■□□□■□■□■□
□■□■□■□■□■□■□■□
□■□■□■□□□■□■□■□
□■□■□■■■■■□■□■□
□■□■□□□□□□□■□■□
□■□■■■■■■■■■□■□
□■□□□□□□□□□□□■□
□■■■■■■■■■■■■■□
□□□□□□□□□□□□□□□"
  );
}
#[test]
fn basic_test_9() {
  assert_eq!(zoom(17), "\
■■■■■■■■■■■■■■■■■
■□□□□□□□□□□□□□□□■
■□■■■■■■■■■■■■■□■
■□■□□□□□□□□□□□■□■
■□■□■■■■■■■■■□■□■
■□■□■□□□□□□□■□■□■
■□■□■□■■■■■□■□■□■
■□■□■□■□□□■□■□■□■
■□■□■□■□■□■□■□■□■
■□■□■□■□□□■□■□■□■
■□■□■□■■■■■□■□■□■
■□■□■□□□□□□□■□■□■
■□■□■■■■■■■■■□■□■
■□■□□□□□□□□□□□■□■
■□■■■■■■■■■■■■■□■
■□□□□□□□□□□□□□□□■
■■■■■■■■■■■■■■■■■"
  );
}
#[test]
fn basic_test_10() {
  assert_eq!(zoom(19), "\
□□□□□□□□□□□□□□□□□□□
□■■■■■■■■■■■■■■■■■□
□■□□□□□□□□□□□□□□□■□
□■□■■■■■■■■■■■■■□■□
□■□■□□□□□□□□□□□■□■□
□■□■□■■■■■■■■■□■□■□
□■□■□■□□□□□□□■□■□■□
□■□■□■□■■■■■□■□■□■□
□■□■□■□■□□□■□■□■□■□
□■□■□■□■□■□■□■□■□■□
□■□■□■□■□□□■□■□■□■□
□■□■□■□■■■■■□■□■□■□
□■□■□■□□□□□□□■□■□■□
□■□■□■■■■■■■■■□■□■□
□■□■□□□□□□□□□□□■□■□
□■□■■■■■■■■■■■■■□■□
□■□□□□□□□□□□□□□□□■□
□■■■■■■■■■■■■■■■■■□
□□□□□□□□□□□□□□□□□□□"
  );
}
